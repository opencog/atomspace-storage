/*
 * tests/persist/zmq/events/AtomSpacePublisherModuleUTest.cxxtest
 *
 * Copyright (C) 2014 OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Cosmo Harrigan
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/server/CogServer.h>
#include <opencog/atomspace/types.h>
#include <opencog/dynamics/attention/atom_types.h>
#include <opencog/atomspace/TruthValue.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/Module.h>
#include <opencog/util/Logger.h>
#include <iostream>
#include <opencog/util/Config.h>
#include <opencog/util/zhelpers.hpp>

#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

using namespace opencog;
using namespace std;

class AtomSpacePublisherModuleUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    std::string url;
    zmq::context_t * context;
    zmq::socket_t * subscriberAdd;
    zmq::socket_t * subscriberRemove;
    zmq::socket_t * subscriberTVChanged;
    zmq::socket_t * subscriberAVChanged;
    zmq::socket_t * subscriberAddAF;
    zmq::socket_t * subscriberRemoveAF;

public:
    void tearDown ()
    {
        cogserver().stop();
        subscriberAdd->close();
        subscriberRemove->close();
        subscriberTVChanged->close();
        subscriberAVChanged->close();
        subscriberAddAF->close();
        subscriberRemoveAF->close();
        delete subscriberAdd;
        delete subscriberRemove;
        delete subscriberTVChanged;
        delete subscriberAVChanged;
        delete subscriberAddAF;
        delete subscriberRemoveAF;
        delete context;
    }

    void InitZeroMQ ()
    {
        //  Prepare the context and event subscribers
        context = new zmq::context_t(1);
        subscriberAdd = new zmq::socket_t(*context, ZMQ_SUB);
        subscriberRemove = new zmq::socket_t(*context, ZMQ_SUB);
        subscriberTVChanged = new zmq::socket_t(*context, ZMQ_SUB);
        subscriberAVChanged = new zmq::socket_t(*context, ZMQ_SUB);
        subscriberAddAF = new zmq::socket_t(*context, ZMQ_SUB);
        subscriberRemoveAF = new zmq::socket_t(*context, ZMQ_SUB);

        subscriberAdd->connect(url.c_str());
        subscriberRemove->connect(url.c_str());
        subscriberTVChanged->connect(url.c_str());
        subscriberAVChanged->connect(url.c_str());
        subscriberAddAF->connect(url.c_str());
        subscriberRemoveAF->connect(url.c_str());

        subscriberAdd->setsockopt(ZMQ_SUBSCRIBE, "add", 3);
        subscriberRemove->setsockopt(ZMQ_SUBSCRIBE, "remove", 6);
        subscriberTVChanged->setsockopt(ZMQ_SUBSCRIBE, "tvChanged", 9);
        subscriberAVChanged->setsockopt(ZMQ_SUBSCRIBE, "avChanged", 9);
        subscriberAddAF->setsockopt(ZMQ_SUBSCRIBE, "addAF", 5);
        subscriberRemoveAF->setsockopt(ZMQ_SUBSCRIBE, "removeAF", 8);

        // Wait for the subscribers to initialize to avoid the 'slow joiner' syndrome
        sleep(5);
    }

    void InitCogServer ()
    {
        try
        {
            config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }

        url = "tcp://localhost:" + config()["ZMQ_EVENT_PORT"];

        config().set("MODULES", "opencog/persist/zmq/events/libatomspacepublishermodule.so");
        
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        // Blindly search a bunch of paths hoping to find the files
        // in one of them ...
        const char * paths[] =
        {
            "./",
            "../",
            "../../",
            "../../../",
            "../../../../",
            "../../../../../",
            "../../../../../../",
            NULL
        };
        cogserver().loadModules(paths);

        this->as = &cogserver().getAtomSpace();
    }

    void testAtomSpaceEvents(void)
    {
        InitCogServer();
        InitZeroMQ();

        std::stringstream ss;
        std::string handle;
        ptree pt;
        ptree ptAtom;
        ptree ptTVOld;
        ptree ptTVNew;
        ptree ptAVOld;
        ptree ptAVNew;

        // Set the AttentionalFocusBoundary
        as->setAttentionalFocusBoundary(1000);

        // Add an atom
        TruthValuePtr tv = SimpleTruthValue::createTV(2.1, 3.1);
        Handle h = as->addNode(CONCEPT_NODE, "ExampleNode", tv);

        // Receive the event
        std::string address = s_recv (*subscriberAdd); // Message envelope with address
        std::string contents = s_recv (*subscriberAdd); // Message contents

        ss << contents;
        read_json(ss, pt);

        ptAtom = pt.get_child("atom");

        // Assert that the subscriber socket received the properly formatted atomspace 'add' event
        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "2.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "3.1");

        // Modify the atom's TruthValue
        TruthValuePtr newTV = SimpleTruthValue::createTV(5.1, 7.1);
        as->setTV(h, newTV);

        // Receive the event
        address = s_recv (*subscriberTVChanged);
        contents = s_recv (*subscriberTVChanged);
        ss << contents;
        read_json(ss, pt);
        handle = pt.get<std::string>("handle");
        ptAtom = pt.get_child("atom");
        ptTVOld = pt.get_child("tvOld");
        ptTVNew = pt.get_child("tvNew");

        // Assert that the subscriber socket received the properly formatted atomspace 'tvchanged' event
        TS_ASSERT(handle == std::to_string(h.value()));

        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "5.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "7.1");

        TS_ASSERT(ptTVOld.get<std::string>("type", "") == "simple");
        TS_ASSERT(ptTVOld.get<std::string>("details.strength", "") == "2.1");
        TS_ASSERT(ptTVOld.get<std::string>("details.count", "") == "3.1");

        TS_ASSERT(ptTVNew.get<std::string>("type", "") == "simple");
        TS_ASSERT(ptTVNew.get<std::string>("details.strength", "") == "5.1");
        TS_ASSERT(ptTVNew.get<std::string>("details.count", "") == "7.1");

        // Modify the atom's AttentionValue
        as->setAV(h, createAV(30, 50, 0));

        address = s_recv (*subscriberAVChanged);
        contents = s_recv (*subscriberAVChanged);
        ss << contents;
        read_json(ss, pt);

        handle = pt.get<std::string>("handle");
        ptAtom = pt.get_child("atom");
        ptAVOld = pt.get_child("avOld");
        ptAVNew = pt.get_child("avNew");

        // Assert that the subscriber socket received the properly formatted atomspace 'avchanged' event
        TS_ASSERT(handle == std::to_string(h.value()))

        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "5.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "7.1");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.sti", "") == "30");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.lti", "") == "50");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.vlti", "") == "false");

        TS_ASSERT(ptAVOld.get<std::string>("sti", "") == "0");
        TS_ASSERT(ptAVOld.get<std::string>("lti", "") == "0");
        TS_ASSERT(ptAVOld.get<std::string>("vlti", "") == "false");

        TS_ASSERT(ptAVNew.get<std::string>("sti", "") == "30");
        TS_ASSERT(ptAVNew.get<std::string>("lti", "") == "50");
        TS_ASSERT(ptAVNew.get<std::string>("vlti", "") == "false");

        // Add the atom to the AttentionalFocus
        as->setAV(h, createAV(1100, 0, 0));

        address = s_recv (*subscriberAddAF);
        contents = s_recv (*subscriberAddAF);
        ss << contents;
        read_json(ss, pt);

        handle = pt.get<std::string>("handle");
        ptAtom = pt.get_child("atom");
        ptAVOld = pt.get_child("avOld");
        ptAVNew = pt.get_child("avNew");

        // Assert that the subscriber socket received the properly formatted atomspace 'addAF' event
        TS_ASSERT(handle == std::to_string(h.value()))

        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "5.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "7.1");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.sti", "") == "1100");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.lti", "") == "0");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.vlti", "") == "false");

        TS_ASSERT(ptAVOld.get<std::string>("sti", "") == "30");
        TS_ASSERT(ptAVOld.get<std::string>("lti", "") == "50");
        TS_ASSERT(ptAVOld.get<std::string>("vlti", "") == "false");

        TS_ASSERT(ptAVNew.get<std::string>("sti", "") == "1100");
        TS_ASSERT(ptAVNew.get<std::string>("lti", "") == "0");
        TS_ASSERT(ptAVNew.get<std::string>("vlti", "") == "false");

        // Remove the atom from the AttentionalFocus
        as->setAV(h, createAV(900, 0, 0));

        address = s_recv (*subscriberRemoveAF);
        contents = s_recv (*subscriberRemoveAF);
        ss << contents;
        read_json(ss, pt);

        handle = pt.get<std::string>("handle");
        ptAtom = pt.get_child("atom");
        ptAVOld = pt.get_child("avOld");
        ptAVNew = pt.get_child("avNew");

        // Assert that the subscriber socket received the properly formatted atomspace 'removeAF' event
        TS_ASSERT(handle == std::to_string(h.value()))

        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "5.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "7.1");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.sti", "") == "900");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.lti", "") == "0");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.vlti", "") == "false");

        TS_ASSERT(ptAVOld.get<std::string>("sti", "") == "1100");
        TS_ASSERT(ptAVOld.get<std::string>("lti", "") == "0");
        TS_ASSERT(ptAVOld.get<std::string>("vlti", "") == "false");

        TS_ASSERT(ptAVNew.get<std::string>("sti", "") == "900");
        TS_ASSERT(ptAVNew.get<std::string>("lti", "") == "0");
        TS_ASSERT(ptAVNew.get<std::string>("vlti", "") == "false");

        // Remove the atom
        as->removeAtom(h);

        // Receive the event
        address = s_recv (*subscriberRemove);
        contents = s_recv (*subscriberRemove);

        // Assert that the subscriber socket received the properly formatted atomspace 'remove' event
        TS_ASSERT(ptAtom.get<std::string>("name", "") == "ExampleNode");
        TS_ASSERT(ptAtom.get<std::string>("type", "") == "ConceptNode");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.type", "") == "simple");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.strength", "") == "5.1");
        TS_ASSERT(ptAtom.get<std::string>("truthvalue.details.count", "") == "7.1");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.sti", "") == "900");
        TS_ASSERT(ptAtom.get<std::string>("attentionvalue.lti", "") == "0");
    }
};
