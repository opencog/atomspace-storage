/*
 * tests/persist/gearman/GearmanUTest.cxxtest
 *
 * Author : Mandeep Singh Bhatia
 * Copyright (C) 2015 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <thread>
#include <string>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/guile/SchemeEval.h>

#include <opencog/persist/gearman/DistSCM.h>

using namespace opencog;
// assuming cxxtest times the tests with some time out and fails test
// on timeout - say if gearman breaks and test blocks forever
// always use cerr or logger to debug instead of cout

class GearmanUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval *evl,*evl2;
	public:
		GearmanUTest(void)
		{
			as = new AtomSpace();
		}

		~GearmanUTest()
		{
			delete as;
		}
		void setUp(void);
		static void create_worker_thread(GearmanUTest* dt);

		// Thread join, after calling set master mode.
		void tearDown(void){}

		// Call master and get return.
		void test_dist();
};

void GearmanUTest::setUp(void)
{
	as->clear();
	SchemeEval* evl = SchemeEval::get_evaluator(as);
	evl->eval("(setenv \"LTDL_LIBRARY_PATH\" \"" PROJECT_BINARY_DIR
	         "/opencog/persist/gearman:/usr/local/lib/opencog\")");
	evl->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/opencog/scm\")");
	evl->eval("(add-to-load-path \"/usr/local/share/opencog/scm\")");
	evl->eval("(use-modules (opencog))");
	evl->eval("(use-modules (opencog dist-gearman))");

	std::cout << "Finish GearmanUTest setup\n";
}

void GearmanUTest::create_worker_thread(GearmanUTest* dt)
{
	std::cout << "Start GearmanUTest worker thread\n";
	SchemeEval* evl = SchemeEval::get_evaluator(dt->as);
	std::string slv = evl->eval(
		"(start-work-handler \"localhost\" \"GearmanUTest-worker1\")");

	std::cout << "GearmanUTest worker exiting, received message: "
	          << slv << std::endl;
	TS_ASSERT_EQUALS(slv, "localhost\n");
}

void GearmanUTest::test_dist()
{
	std::thread workThread(create_worker_thread, this);

	sleep(1);
	std::cout << "GearmanUTest master thread going to issue work\n";
	// Call master
	std::string mast =
		"(dist-eval \"(ConceptNode \\\"Hello\\\")\" \"client1\")";

	SchemeEval* evl = SchemeEval::get_evaluator(as);
	std::string result = evl->eval(mast);
	std::cout << "GearmanUTest master got result:" << result;

	evl->eval("(exit-all-workers)");
	workThread.join();

	Handle got = evl->eval_h(result.c_str());
	Handle expected = evl->eval_h("(ConceptNode \"Hello\")");
	TS_ASSERT_EQUALS(got, expected);
}
