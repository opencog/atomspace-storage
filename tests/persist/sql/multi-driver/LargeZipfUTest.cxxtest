/*
 * tests/persist/sql/multi-driver/LargeZipfTest.cxxtest
 *
 * Emulate word-pair dataset with Zipfian incoming sets.
 *
 * If this test is failing for you, then be sure to read the README in
 * this directory, and also ../../opencong/persist/README, and then
 * create and configure the SQL database as described there. Next,
 * edit ../../lib/test-opencog.conf to add the database credentials
 * (the username and passwd).
 *
 * Copyright (C) 2008, 2009, 2013, 2019 Linas Vepstas <linasvepstas@gmail.com>
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

#include <cstdio>

#include <opencog/atoms/atom_types/atom_types.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/persist/sql/multi-driver/SQLAtomStorage.h>
#include <opencog/persist/sql/multi-driver/SQLPersistSCM.h>

#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>

#include "mkuri.h"

using namespace opencog;

class LargeZipfTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *_as;
		std::string uri;
		const char * dbname;
		const char * username;
		const char * passwd;

#define NPAIRS 257000
		Handle hpair[NPAIRS];
#define NWORDS 35000
		Handle hword[NWORDS];

	public:

		LargeZipfTest(void);
		~LargeZipfTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
		}

		void setUp(void);
		void tearDown(void);
		void kill_data(void);

		void friendlyFailMessage()
		{
			TS_FAIL("The LargeZipfTest failed.\n"
				"This is probably because you do not have SQL installed\n"
				"or configured the way that OpenCog expects.\n\n"
				"SQL persistance is optional for OpenCog, so if you don't\n"
				"want it or need it, just ignore this test failure.\n"
				"Otherwise, please be sure to read opencong/persist/sql/README,\n"
				"and create/configure the SQL database as described there.\n"
				"Next, edit lib/atomspace-test.conf appropriately, so as\n"
				"to indicate the location of your database. If this is\n"
				"done correctly, then this test will pass.\n");
			exit(1);
		}

		int filler_up(AtomSpace *);
		void fetch_space(int, AtomSpace *);
		void check_space(int, AtomSpace *, std::string dbgmsg);
		void check_empty(int, AtomSpace *);
		void atomCompare(AtomPtr, AtomPtr, std::string);

		void do_test_atomspace(void);
		void test_odbc_atomspace(void);
		void test_pq_atomspace(void);
};

LargeZipfTest:: LargeZipfTest(void)
{
	try
	{
		config().load("atomspace-test.conf");
	}
	catch (RuntimeException &e)
	{
		std::cerr << e.get_message() << std::endl;
	}
	// logger().set_level(Logger::DEBUG);
	logger().set_level(Logger::INFO);
	logger().set_print_to_stdout_flag(true);

	try {
		// Get the database logins & etc from the config file.
		dbname = config().get("TEST_DB_NAME", "opencog_test").c_str();
		username = config().get("TEST_DB_USERNAME", "opencog_tester").c_str();
		passwd = config().get("TEST_DB_PASSWD", "cheese").c_str();
	}
	catch (InvalidParamException &e)
	{
		friendlyFailMessage();
	}
}

/*
 * This is called once before each test, for each test (!!)
 */
void LargeZipfTest::setUp(void)
{
	_as = new AtomSpace();
}

void LargeZipfTest::tearDown(void)
{
	delete _as;

	kill_data();
}

// ============================================================

void LargeZipfTest::kill_data(void)
{
#if HAVE_ODBC_STORAGE
	if ("" == uri) uri = mkuri("odbc", dbname, username, passwd);
#endif
#if HAVE_PGSQL_STORAGE
	if ("" == uri) uri = mkuri("postgres", dbname, username, passwd);
#endif
	SQLAtomStorage* astore = new SQLAtomStorage(uri);
	if (!astore->connected())
	{
		logger().info("setUp: SQLAtomStorage cannot connect to database");
		friendlyFailMessage();
		exit(1);
	}
	logger().info("Delete data in \"%s\" as \"%s\" passwd \"%s\"", dbname, username, passwd);

	// Trash the contents of the database.
	astore->kill_data();

	// Destructor also logs out of database (avoid warning in DB log file)
	delete astore;
}

// ============================================================

void LargeZipfTest::atomCompare(AtomPtr a, AtomPtr b, std::string where)
{
	// printf("Check %s expect %s\n", where.c_str(), a->to_string().c_str());
	TSM_ASSERT("No atom found", b != nullptr);

	if (nullptr == b) return;

	TSM_ASSERT_EQUALS("Type mismatch", a->get_type(), b->get_type());

	if (a->is_node())
	{
		TSM_ASSERT_EQUALS("Name mismatch", a->get_name(), b->get_name());
	}

	if (a->is_link())
	{
		TSM_ASSERT_EQUALS("Arity mismatch", la->get_arity(), lb->get_arity());
		if (*la != *lb)
		{
			printf("Mismatching la = %s\n", la->to_string().c_str());
			printf("Mismatching lb = %s\n", lb->to_string().c_str());
			TSM_ASSERT_EQUALS("Link mis-match", la, lb);
		}
	}

	TruthValuePtr ta = a->getTruthValue();
	TruthValuePtr tb = b->getTruthValue();
	if (ta or tb)
	{
		TSM_ASSERT("Missing truth value", ta);
		TSM_ASSERT("Missing truth value", tb);
		if (ta and tb)
		{
			TSM_ASSERT("Truth value miscompare", (*ta)==(*tb));

			if (not ((*ta) == (*tb)))
			{
				fprintf(stderr, "Error, truth value miscompare, "
				   "ma=%f mb=%f ca=%f cb=%f\n",
				   ta->get_mean(), tb->get_mean(),
				   ta->get_confidence(), tb->get_confidence());
			}
		}
	}
}

// ============================================================

void LargeZipfTest::fetch_space(int idx, AtomSpace *space)
{
	AtomPtr ab1 = createNode(n1[idx]->get_type(), n1[idx]->get_name());
	Handle hb1(ab1->get_handle());
	space->fetch_atom(hb1);

	AtomPtr ab2 = createNode(n2[idx]->get_type(), n2[idx]->get_name());
	Handle hb2(ab2->get_handle());
	space->fetch_atom(hb2);

	AtomPtr ab3 = createNode(n3[idx]->get_type(), n3[idx]->get_name());
	Handle hb3(ab3->get_handle());
	space->fetch_atom(hb3);

	AtomPtr ab4 = createNode(n4[idx]->get_type(), n4[idx]->get_name());
	Handle hb4(ab4->get_handle());
	space->fetch_atom(hb4);

	HandleSeq hvec;
	hvec.push_back(hb1);
	hvec.push_back(hb2);
	hvec.push_back(hb3);
	hvec.push_back(hb4);

	AtomPtr alb = createLink(hvec, hl[idx]->get_type());
	Handle hlb(alb->get_handle());
	space->fetch_atom(hlb);

	HandleSeq hv2({hlb, hb2});
	AtomPtr alb2 = createLink(hv2, hl2[idx]->get_type());
	Handle hlb2(alb2->get_handle());
	space->fetch_atom(hlb2);

	HandleSeq hv3({hb1, hlb2, hb3});
	AtomPtr alb3 = createLink(hv3, hl3[idx]->get_type());
	Handle hlb3(alb3->get_handle());
	space->fetch_atom(hlb3);
}

void LargeZipfTest::check_space(int idx, AtomSpace *space, std::string dbgmsg)
{
	Handle hb1 = space->get_handle(n1[idx]->get_type(), n1[idx]->get_name());
	atomCompare(h1[idx], hb1, dbgmsg + "-hb1");

	Handle hb2 = space->get_handle(n2[idx]->get_type(), n2[idx]->get_name());
	atomCompare(h2[idx], hb2, dbgmsg + "-hb2");

	Handle hb3 = space->get_handle(n3[idx]->get_type(), n3[idx]->get_name());
	atomCompare(h3[idx], hb3, dbgmsg + "-hb3");

	Handle hb4 = space->get_handle(n4[idx]->get_type(), n4[idx]->get_name());
	atomCompare(h4[idx], hb4, dbgmsg + "-hb4");

	HandleSeq hvec;
	hvec.push_back(hb1);
	hvec.push_back(hb2);
	hvec.push_back(hb3);
	hvec.push_back(hb4);

	Handle hlb = space->get_handle(hl[idx]->get_type(), hvec);
	atomCompare(hl[idx], hlb, dbgmsg + "-hlinkb");

	HandleSeq hv2({hlb, hb2});
	Handle hlb2 = space->get_handle(hl2[idx]->get_type(), hv2);
	atomCompare(hl2[idx], hlb2, dbgmsg + "-hlinkb2");

	HandleSeq hv3({hb1, hlb2, hb3});
	Handle hlb3 = space->get_handle(hl3[idx]->get_type(), hv3);
	atomCompare(hl3[idx], hlb3, dbgmsg + "-hlinkb3");
}

void LargeZipfTest::check_empty(int idx, AtomSpace *space)
{
	Handle hb1 = space->get_handle(n1[idx]->get_type(), n1[idx]->get_name());
	TSM_ASSERT("Should not find this atom", hb1 == Handle::UNDEFINED);

	Handle hb2 = space->get_handle(n2[idx]->get_type(), n2[idx]->get_name());
	TSM_ASSERT("Should not find this atom", hb2 == Handle::UNDEFINED);

	Handle hb3 = space->get_handle(n3[idx]->get_type(), n3[idx]->get_name());
	TSM_ASSERT("Should not find this atom", hb3 == Handle::UNDEFINED);

	Handle hb4 = space->get_handle(n4[idx]->get_type(), n4[idx]->get_name());
	TSM_ASSERT("Should not find this atom", hb4 == Handle::UNDEFINED);

	HandleSeq hvec;
	hvec.push_back(h1[idx]);
	hvec.push_back(h2[idx]);
	hvec.push_back(h3[idx]);
	hvec.push_back(h4[idx]);

	Handle hlb = space->get_handle(hl[idx]->get_type(), hvec);
	TSM_ASSERT("Should not find this atom", hlb == Handle::UNDEFINED);
}

// ============================================================

int LargeZipfTest::filler_up(AtomSpace *space)
{
	// Emulate a word, with a spelling that is not long, not short ...
	std::string wrd = "Word-ishy "
	for (int w=0; w<NWORDS; w++)
	{
		hword[w] = as->add_node(CONCEPT_NODE, wrd + std::to_string(w));
		TruthValuePtr tv(CountTruthValue::createTV(1, 0, ((int) NWORDS/w)));
		hword[w]->setTruthValue(tv);
	}

	// Emulate a zipfian distribution.
	// Half of words linked once.  rpt = 1, wmax = NWORDS
	// quarter of words linked twice.  rpt = 2, wmax = NWORDS/2
	// eighth of words linked 4 times.  rpt = 4, wmax = NWORDS/4
	// 1/16 of words linked 8 times. rpt = 8, wmax = NWORDS/8
	int w1 = 0;
	int w2 = 0;
	int wmax = NWORDS;
	int rpt = 1;
	int again = 0;
	int p = 0;
	while (p<NPAIRS;)
	{
		hpair[p] = as->add_link(LIST_LINK, hword[w1], hword[w2]);
		w2++;
		p++;
		if (wmax <= w2)
		{
			w2=0;
			w1++;
			again ++;
			if (rpt <= again)
			{
				again = 0;
				rpt *= 2;
				wmax /= 2;
			}
			if (NWORDS <= w1) break;
		}
	}
	return p;
}

// ============================================================

void LargeZipfTest::test_odbc_atomspace(void)
{
#ifdef HAVE_ODBC_STORAGE
	uri = mkuri("odbc", dbname, username, passwd);
	do_test_atomspace();
#endif
}

void LargeZipfTest::test_pq_atomspace(void)
{
#ifdef HAVE_PGSQL_STORAGE
	uri = mkuri("postgres", dbname, username, passwd);
	do_test_atomspace();
#endif
}

void LargeZipfTest::do_test_atomspace(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	kill_data();

	SQLPersistSCM* _pm = new SQLPersistSCM(_as);
	TSM_ASSERT("Persist Module not loaded", _pm);

	try {
		_pm->do_open(uri);
	}
	catch (RuntimeException &e)
	{
		logger().info("setUp: SQLPersistSCM cannot connect to database");
		friendlyFailMessage();
		exit(1);
	};

	/* Create a large number of atoms */
	int idx = filler_up(_as);

	/* Verify that the atoms were added */
	int i;
	for (i=0; i<idx; i++)
		check_space(i, _as, "verify-add");

	/* Push all atoms out to the SQL DB */
	_as->store_atomspace();

	/* Extract atoms from the AtomSpace. This does not delete them from
	 * the SQL storage, though; to do that, they must be deleted, not
	 * extracted.
	 */
	_as->barrier();
	_as->clear();
	TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

	/* Verify that the atoms can still be fetched from storage. */
	for (i=0; i<idx; i++) {
		fetch_space(i, _as);
		check_space(i, _as, "verify-fetch");
	}

	/* Do it again, for good luck.  */
	_as->clear();
	TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());

	/* Verify that the atoms can still be fetched from storage. */
	for (i=0; i<idx; i++) {
		fetch_space(i, _as);
		check_space(i, _as, "ver-again");
	}

	/* Kill data for good */
	_as->clear();
	TSM_ASSERT("Non-empty atomspace", 0 == _as->get_size());
	kill_data();

	/* Verify that the atoms are no longer being found. */
	for (i=0; i<idx; i++)
		check_empty(i, _as);

	/* Orderly shutdown avoids warning in Postgres log file. */
	_pm->do_close();

	delete _pm;
	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
