//
// Script for automatic "storage atom type" generation. This defines
// a collection of types suitable for defining distributed storage
// interconnects.
//
// The base type for all storage nodes. Seems like BondNode is a
// suitable base, I guess .. !?
STORAGE_NODE <- BOND_NODE
//
// Specific storage nodes. Most of these are implemented in other git
// repos, and not here. Look for git repos called "atomspace-xxx" for
// approrpiate values of "xxx".
POSTGRES_STORAGE_NODE <- STORAGE_NODE
FILE_STORAGE_NODE <- STORAGE_NODE

// Mono is a single-atomspace version of Rocks.
MONO_STORAGE_NODE <- STORAGE_NODE
ROCKS_STORAGE_NODE <- STORAGE_NODE

// Both Cog's implement network storage to CogServer.
COG_SIMPLE_STORAGE_NODE <- STORAGE_NODE
COG_STORAGE_NODE <- STORAGE_NODE

// Experimental SQL I/O interfaces in atomspace-automap git repo
FOREIGN_STORAGE_NODE <- STORAGE_NODE

// There is no IPFS_STORAGE_NODE nor DHT_STORAGE_NODE because these
// are currently deeply, fundamentally broken. Whoops!

// ------------------------------------------------------------------
// Base type for the various proxies
PROXY_NODE <- STORAGE_NODE

// Pass all requests on to the underlying AtomSpace.
NULL_PROXY_NODE <- PROXY_NODE

// Mirroring Proxy, selects one StorageNode target randomly out of the
// set that it's given, and reads from that. Does NOT pass on writes.
READ_THRU_PROXY_NODE <- PROXY_NODE

// Read through a sequence of StorageNodes, stop when the first one
// finds a result.
SEQUENTIAL_READ_PROXY_NODE <- PROXY_NODE

// Mirroring Proxy, write thru to *all* StorageNodes. Does NOT pass on
// reads.
WRITE_THRU_PROXY_NODE <- PROXY_NODE

// Combo of ReadtThru and WriteThru
READ_WRITE_PROXY_NODE <- PROXY_NODE

// Read-caching Proxy. Goes to Storage only if the requested item is
// not in the local AtomSpace. Configurable to expire the data after
// some time, or to limit the cache to a fixed size.
CACHING_PROXY_NODE <- PROXY_NODE

// Supplies Values on-demand from the provided ProcedureNodes.
// Given an (Atom,Key) pair, it computes the appropriate Value on the fly.
DYNAMIC_DATA_PROXY_NODE <- PROXY_NODE

// Decorate the Proxies with additional parameters.
// We use the UniqueLink because the DefineLink constructor does
// checks for DefinedSchema and what-not, which wrecks us.
PROXY_PARAMETERS_LINK <- UNIQUE_LINK

// ------------------------------------------------------------------
// Fetch and store Values from Storage.
// Marked "NUMERIC" only because having a FetchFloatValueOfLink seems
// like overkill.
//
// These are here, instead of in the "main" atom_types.script because
// the implementation for them is here, because otherwise crazy library
// dependency issues arise.
FETCH_VALUE_OF_LINK <- VALUE_OF_LINK,NUMERIC_OUTPUT_LINK
STORE_VALUE_OF_LINK <- VALUE_OF_LINK,NUMERIC_OUTPUT_LINK
