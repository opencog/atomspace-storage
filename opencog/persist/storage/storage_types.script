//
// Script for automatic "storage atom type" generation. This defines
// a collection of types suitable for defining distributed storage
// interconnects.
//
// The ObjectNode is the base class for StorageNode, because all
// StorageNodes are stateful objects, existing in the real physical
// world, and accept the messages that define the storage API.
STORAGE_NODE <- OBJECT_NODE
//
// Specific storage nodes. FileStoreageNode is implemented here, because
// it is so simple. The others are implemented in other git repos,
// according to the type.
FILE_STORAGE_NODE <- STORAGE_NODE

// The old, deprecated Postgres driver.
// See https://github.com/opencog/atomspace-pgres
// POSTGRES_STORAGE_NODE <- STORAGE_NODE

// Mono and Rocks implement storage to RocksDB files.
// Mono is a single-atomspace version of Rocks; it does not support
// mutiple AtomSpaces. However, its faster, and its compatbile in
// the file format.
// See https://github.com/opencog/atomspace-rocks
// MONO_STORAGE_NODE <- STORAGE_NODE
// ROCKS_STORAGE_NODE <- STORAGE_NODE

// Both Cog's implement network storage to CogServer.
// See https://github.com/opencog/atomspace-cog
// COG_SIMPLE_STORAGE_NODE <- STORAGE_NODE
// COG_STORAGE_NODE <- STORAGE_NODE

// Experimental SQL I/O interfaces.
// See https://github.com/opencog/atomspace-bridge
// BRIDGE_STORAGE_NODE <- STORAGE_NODE

// The IPFS_STORAGE_NODE and DHT_STORAGE_NODE are not defined
// either here, or in the corresponding get repos. This is because
// these are currently deeply, fundamentally broken. Whoops!

// ------------------------------------------------------------------
// Base type for the various proxies
PROXY_NODE <- STORAGE_NODE

// Pass all requests on to the underlying AtomSpace.
NULL_PROXY_NODE <- PROXY_NODE

// Mirroring Proxy, selects one StorageNode target randomly out of the
// set that it's given, and reads from that. Does NOT pass on writes.
READ_THRU_PROXY_NODE <- PROXY_NODE

// Read through a sequence of StorageNodes, stop when the first one
// finds a result.
SEQUENTIAL_READ_PROXY_NODE <- PROXY_NODE

// Mirroring Proxy, write thru to *all* StorageNodes. Does NOT pass on
// reads.
WRITE_THRU_PROXY_NODE <- PROXY_NODE

// Combo of ReadtThru and WriteThru
READ_WRITE_PROXY_NODE <- PROXY_NODE

// WriteBufferProxy. Deduplicates multiple writes by maintaining a
// pending buffer. Goal is to avoid excess writes of the same atom in
// a short time-frame. Inherits from WriteThruProxy, because it also
// needs to maintain a list of targets, so may as well use WriteThru
// for that.
WRITE_BUFFER_PROXY_NODE <- WRITE_THRU_PROXY_NODE

// Read-caching Proxy. Goes to Storage only if the requested item is
// not in the local AtomSpace. Configurable to expire the data after
// some time, or to limit the cache to a fixed size.
CACHING_PROXY_NODE <- PROXY_NODE

// Supplies Values on-demand from the provided ProcedureNodes.
// Given an (Atom,Key) pair, it computes the appropriate Value on the fly.
DYNAMIC_DATA_PROXY_NODE <- PROXY_NODE

// ------------------------------------------------------------------
// Fetch and store Values from Storage.
// Marked "NUMERIC" only because having a FetchFloatValueOfLink seems
// like overkill.
//
// These are here, instead of in the "main" atom_types.script because
// the implementation for them is here, because otherwise crazy library
// dependency issues arise.
FETCH_VALUE_OF_LINK <- VALUE_OF_LINK,NUMERIC_OUTPUT_LINK
STORE_VALUE_OF_LINK <- VALUE_OF_LINK,NUMERIC_OUTPUT_LINK
