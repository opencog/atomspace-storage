
            AtomSpace Serializers and Deserializers (SerDes)
                 AKA "Communications and Persistence"
             -------------------------------------------

The AtomSpace may be converted from its native, in-memory C++ object
format, into any one of a number of "flattened", non-object formats.
These formats allow atoms to be sent to and received from remote systems,
as well as to be saved and restored from various databases.

Systems include:

gearman    -- Experimental support for distributed operation, using
              GearMan.

sql        -- Works well for most uses -- with caveats. It's slow.

others     -- There used to be more. They have all bit-rotted.


The gearman and sql systems support networked, peer-to-peer communications
between AtomSpaces.

Semantics
---------
The correct semantics for the save and restore of values, including
truth values, an be subtle: during recrusive saves or loads of outgoing
sets, should values be clobbered? Left untouched? Merged?  The various
possibilities all have different performance implications, as well as
usability implications. These are discussed in the README.md file for
the SQL implementation, and semantics are explicitly tested in the SQL
unit tests.


Future directions:
------------------
To understand the future directions for the (distributed) atomspace
and its relation to storage, read the "Big Graph Anti-Pattern" blog
post: http://blog.bigdata.com/?p=628

OpenCog most closely resembles the fourth bullet in that post:
"Graph query (aka graph pattern matching)"  Based on this, the
most promising backend would seem to be "bigdata":
http://sourceforge.net/projects/bigdata/ (GPLv2)
http://www.bigdata.com/
